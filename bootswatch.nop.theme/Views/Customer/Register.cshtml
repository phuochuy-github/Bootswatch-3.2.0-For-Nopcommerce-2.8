@model RegisterModel
@using Nop.Web.Models.Customer;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);
}
<script>
    $(document).ready(function () {
        $("input[type=text]:not(#newsletter-email)").addClass("form-control").addClass("input-sm");
        $("input[type=password]").addClass("form-control").addClass("input-sm");
    })
</script>
<style>
    fieldset legend{
        margin-bottom:10px;
    }
</style>
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
     $(function() {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function(id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }  
                });
            });
        });
    </script>
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="page registration-page row">
        
        <div class="page-body col-xs-12 col-sm-6">
            <div class="message-error">
                @Html.ValidationSummary(true)
            </div>
            <div class="clear">
            </div>
            @Html.Partial("_ExternalAuthentication.AssociateMessage")
            <div class="clear">
            </div>
            <h1 style="margin-top:0;">@T("Account.Register")</h1>
            <div class="clear">
            </div>
            <h3>@T("Account.YourPersonalDetails")</h3>
            @if (Model.GenderEnabled)
            {
                <div class="form-group">
                    <label>@T("Account.Fields.Gender"):</label>
                    @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                    <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                    @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                    <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                </div>
            }
            <div class="form-group">
                @Html.LabelFor(model => model.FirstName) @Html.RequiredHint()
                @Html.EditorFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName, null, new { @class="label label-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.LastName) @Html.RequiredHint()
                @Html.EditorFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName, null, new { @class="label label-danger" })
            </div>
            @if (Model.DateOfBirthEnabled)
            {
                <div class="form-group">
                    <label>@T("Account.Fields.DateOfBirth")</label>
                    @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                        Html.FieldNameFor(x => x.DateOfBirthMonth),
                        Html.FieldNameFor(x => x.DateOfBirthYear),
                        DateTime.Now.Year - 110,
                        DateTime.Now.Year,
                        Model.DateOfBirthDay,
                        Model.DateOfBirthMonth,
                        Model.DateOfBirthYear)
                    @Html.ValidationMessageFor(model => model.DateOfBirthDay, null, new { @class="label label-danger" })
                    @Html.ValidationMessageFor(model => model.DateOfBirthMonth, null, new { @class="label label-danger" })
                    @Html.ValidationMessageFor(model => model.DateOfBirthYear, null, new { @class="label label-danger" })
                </div>
            }
            <div class="form-group">
                 @Html.LabelFor(model => model.Email) @Html.RequiredHint() 
                 @Html.EditorFor(model => model.Email)
                 @Html.ValidationMessageFor(model => model.Email, null, new { @class="label label-danger" })
            </div>
            @if (Model.UsernamesEnabled)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Username) @Html.RequiredHint()
                    @Html.EditorFor(model => model.Username)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Username, null, new { @class="label label-danger" })
                    @if (Model.CheckUsernameAvailabilityEnabled)
                    {
                        @Html.Partial("_CheckUsernameAvailability")
                    }
                </div>
            }
            
            <h3>@T("Account.YourPassword")</h3>

            <div class="form-group">
                @Html.LabelFor(model => model.Password) @Html.RequiredHint()
                @Html.EditorFor(model => model.Password)
                @Html.ValidationMessageFor(model => model.Password, null, new { @class="label label-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword) @Html.RequiredHint()
                @Html.EditorFor(model => model.ConfirmPassword)
                @Html.ValidationMessageFor(model => model.ConfirmPassword, null, new { @class="label label-danger" })
            </div>
            @if (Model.DisplayCaptcha)
            {
                <div class="form-group">
                    @Html.Raw(Html.GenerateCaptcha())
                </div>
            }
            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                <h3>@T("Account.CompanyDetails")</h3>
                if (Model.CompanyEnabled)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.Company)
                        @if (Model.CompanyRequired)
                        {
                            @Html.RequiredHint()
                        }
                        @Html.EditorFor(model => model.Company)
                        @Html.ValidationMessageFor(model => model.Company, null, new { @class="label label-danger" })
                    </div>
                }
                if (Model.DisplayVatNumber)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.VatNumber)
                        @Html.EditorFor(model => model.VatNumber)&nbsp;&nbsp;&nbsp;@Model.VatNumberStatusNote
                        <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                    </div>
                }

            }
            @if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled
            || Model.CityEnabled || Model.CountryEnabled)
            {
                <h3>@T("Account.YourAddress")</h3>
                if (Model.StreetAddressEnabled)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.StreetAddress)
                        @if (Model.StreetAddressRequired)
                        {
                            @Html.RequiredHint()
                        }
                        @Html.EditorFor(model => model.StreetAddress)
                        @Html.ValidationMessageFor(model => model.StreetAddress, null, new { @class="label label-danger" })
                    </div>
                }
                if (Model.StreetAddress2Enabled)
                {
                        <div class="form-group">
                            @Html.LabelFor(model => model.StreetAddress2)
                            @if (Model.StreetAddress2Required)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.EditorFor(model => model.StreetAddress2)
                            @Html.ValidationMessageFor(model => model.StreetAddress2, null, new { @class="label label-danger" })
                        </div>
                        
                }
                if (Model.ZipPostalCodeEnabled)
                {
                        <div class="form-group">
                            @Html.LabelFor(model => model.ZipPostalCode)
                            @if (Model.ZipPostalCodeRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.EditorFor(model => model.ZipPostalCode)
                            @Html.ValidationMessageFor(model => model.ZipPostalCode, null, new { @class="label label-danger" })
                        </div>
                }
                if (Model.CityEnabled)
                {
                        <div class="form-group">
                            @Html.LabelFor(model => model.City)
                            @if (Model.CityRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.EditorFor(model => model.City)
                            @Html.ValidationMessageFor(model => model.City, null, new { @class="label label-danger" })
                        </div>
                }
                if (Model.CountryEnabled)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.CountryId) 
                        @Html.DropDownList("CountryId", Model.AvailableCountries)
                    </div>
                }
                if (Model.CountryEnabled && Model.StateProvinceEnabled)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.StateProvinceId)
                        @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                        <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                    </div>
                }
            }
            
            
            
            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <h3>@T("Account.YourContactInformation")</h3>
                if (Model.PhoneEnabled)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.Phone) 
                        @if (Model.PhoneRequired)
                        {
                            @Html.RequiredHint()
                        }
                        @Html.EditorFor(model => model.Phone)
                        @Html.ValidationMessageFor(model => model.Phone, null, new { @class="label label-danger" })
                    </div>
                }
                if (Model.FaxEnabled)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.Fax)
                        @if (Model.FaxRequired)
                        {
                            @Html.RequiredHint()
                        }
                        @Html.EditorFor(model => model.Fax)
                        @Html.ValidationMessageFor(model => model.Fax, null, new { @class="label label-danger" })
                    </div>
                }
            }
            @if (Model.AllowCustomersToSetTimeZone)
            {
                <h3>@T("Account.Preferences")</h3>
                if (Model.AllowCustomersToSetTimeZone)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.TimeZoneId):
                        @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                        @Html.ValidationMessageFor(model => model.TimeZoneId, null, new { @class="label label-danger" })
                    </div>
                }
            }
            
            <div class="clear">
            </div>
            @if (Model.AcceptPrivacyPolicyEnabled)
            {
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#register-button').click(function () {
                            if ($('#accept-privacy-policy').is(':checked')) {
                                //do some stuff
                                return true;
                            }
                            else {
                                //just show validation errors, dont post
                                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                return false;
                            }
                        });
                    });
                </script>
                <div class="accept-privacy-policy form-group">
                    <input id="accept-privacy-policy" type="checkbox" name="accept-privacy-policy" />
                    <label for="accept-privacy-policy">@T("Account.Fields.AcceptPrivacyPolicy")</label>
                    <a class="read" href='@Url.RouteUrl("Topic", new { SystemName = "privacyinfo" })'>@T("Account.Fields.AcceptPrivacyPolicy.Read")</a>
                </div>
                <div class="clear">
                </div>
            }
            @if (Model.NewsletterEnabled)
            {
                <h3>@T("Account.Options")</h3>
                <div class="form-group">
                    @Html.LabelFor(model => model.Newsletter)
                    @Html.EditorFor(model => model.Newsletter)
                    @Html.ValidationMessageFor(model => model.Newsletter, null, new { @class="label label-danger" })
                </div>
            }
            <div class="buttons" style="margin-bottom:20px;">
                <input type="submit" id="register-button" class="btn-sm  btn btn-success register-next-step-button" value="@T("Account.Register.Button")" name="register-button" />
            </div>
        </div>
    </div>
}